{"version":3,"sources":["styles/mapStyles.js","components/AddressBox.js","components/InputBox.js","components/Compass.js","components/DropdownSteps.js","components/Directions.js","App.js","index.js"],"names":["mapStyle","AddressBox","_ref","marker","onDelete","id","setSelected","_jsxs","className","children","_jsx","address","IconButton","onClick","DeleteIcon","inputBox","props","PlacesAutoComplete","value","onChange","setAddress","onSelect","handleSelect","getInputProps","suggestions","getSuggestionItemProps","loading","_objectSpread","placeholder","map","suggestion","index","style","backgroundColor","active","width","description","Compass","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","mapRef","current","panTo","setZoom","enableHighAccuracy","src","alt","DropdownSteps","title","steps","open","setOpen","useState","handleClickOutside","item","dangerouslySetInnerHTML","__html","instructions","distance","text","duration","clickOutsideConfig","onClickOutside","Directions","markers","polylines","clearDirections","btn","setBtn","routeBox","setRouteBox","stIdx","travMode","showTravMode","setShowTravMode","stshowIdx","setStshowIdx","latlngbounds","useRef","path","minTime","Number","MAX_VALUE","travDistAndTime","setTravDistAndTime","dist","time","dp","routeBuildResponse","setRouteBuildResponse","directionsService","window","google","maps","DirectionsService","recenterMap","LatLngBounds","forEach","extend","setCenter","getCenter","fitBounds","mode","TravelMode","DRIVING","WALKING","TRANSIT","BICYCLING","TSP","timeMatrix","maskVal","currPos","checkMask","currTime","elements","currPath","ansTime","ansPath","i","length","chooseMode","modeClicked","alert","markerPoints","plot","requests","push","origin","destination","travelMode","buildRoute","Promise","all","request","resolve","route","result","status","routes","legs","then","results","toFixed","flatMap","step","allCoords","animatePath","callback","DistanceMatrixService","getDistanceMatrix","origins","destinations","res","rows","j","Array","Math","pow","calMatrix","showRoute","pathCoords","idx","Polyline","geodesic","strokeColor","strokeOpacity","strokeWeight","editable","chunk","ceil","totalChunks","requestAnimationFrame","setPath","slice","nextClick","start_address","end_address","require","config","mapContainerStyle","height","center","options","styles","mapStyles","mapTypeControl","App","libraries","isLoaded","loadError","useLoadScript","googleMapsApiKey","process","setMarkers","selected","onMapLoad","useCallback","setMap","deletePoint","filter","display","justifyContent","alignItems","fontFamily","fontSize","color","RemoveScrollBar","InputBox","async","geocodeByAddress","latlng","getLatLng","GoogleMap","zoom","event","geocoder","Geocoder","latLng","geocode","location","formatted_address","onLoad","Marker","icon","url","scaledSize","Size","Point","anchor","animation","Animation","DROP","draggable","onDragEnd","e","markerDrag","console","log","InfoWindow","pixelOffset","onCloseClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8a76b03.chunk.js","sourcesContent":["const mapStyle = [\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": \"-100\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative.province\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": -100\n            },\n            {\n                \"lightness\": 65\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": -100\n            },\n            {\n                \"lightness\": \"50\"\n            },\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": \"-100\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"lightness\": \"30\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.local\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"lightness\": \"40\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": -100\n            },\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"hue\": \"#ffff00\"\n            },\n            {\n                \"lightness\": -25\n            },\n            {\n                \"saturation\": -97\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"lightness\": -25\n            },\n            {\n                \"saturation\": -100\n            }\n        ]\n    }\n]\n\nexport default mapStyle","import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { IconButton } from '@material-ui/core';\n\nexport default function AddressBox({marker, onDelete, id, setSelected}){\n\n    return (\n        <div className = \"addressBox\">\n            <div className = \"d1\">\n                <p>{marker.address}</p>\n            </div>\n            <div className = \"d2\">\n                <IconButton aria-label=\"delete\" onClick = {\n                    () => {\n                        onDelete(id)\n                        setSelected(null)\n                    }\n                }>\n                    <DeleteIcon />\n                </IconButton>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport PlacesAutoComplete from 'react-places-autocomplete'\n\nexport default function inputBox(props){\n    return (\n        <PlacesAutoComplete value = {props.address} onChange = {props.setAddress} onSelect = {props.handleSelect}>\n            {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                <div className = \"searchBox\">\n\n                    <input className = \"inputBox\" {...getInputProps({placeholder : \"Type Address\"})}/>\n                    <div>\n                        {loading ? <div className=\"loading-places\">\n                            <div className=\"loading-spinner\"></div>\n                            <span>Loading places...</span>\n                        </div> : null}\n                        {suggestions.map((suggestion, index) => {\n                            const style = {\n                                backgroundColor : suggestion.active ? \"rgba(8, 217, 214, 0.35)\" : \"#fff\",\n                                width : \"100%\"\n                            }\n                            return (\n                                <div key = {index} className = \"suggestions\" {...getSuggestionItemProps( suggestion, {style})}>\n                                    {suggestion.description}\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            )}\n        </PlacesAutoComplete>\n    )\n}","import React from 'react';\n\nexport default function Compass(props){\n\n    function userLocate(){\n        navigator.geolocation.getCurrentPosition((position) => {\n            const lat = position.coords.latitude\n            const lng = position.coords.longitude\n            props.mapRef.current.panTo({lat, lng})\n            props.mapRef.current.setZoom(14)\n        },() => null, {\n            enableHighAccuracy : true\n        });\n    }\n\n    return <button className = \"compass\" onClick = {userLocate}>\n        <img src = \"./images/compass.svg\" alt = \"Compass\"/>\n    </button>\n}","import React,{ useState } from 'react';\nimport onClickOutside from 'react-onclickoutside'\n\nfunction DropdownSteps({title, steps}){\n    \n    const [open,setOpen] = useState(false);\n\n    DropdownSteps.handleClickOutside = () => setOpen(false);\n\n    return (\n        <div className = \"dropup\">\n            <button onClick = {() => setOpen(!open)} className = \"dropbtn\">{title}</button>\n            <div className = \"dropup-content\">\n                {open && steps.map((item, index) => (\n                    <li key = {index}>\n                        <td dangerouslySetInnerHTML={{__html: item.instructions}} />\n                        <p>Distance : {item.distance.text} </p>\n                        <p>Duration : {item.duration.text}</p>\n                    </li>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nconst clickOutsideConfig = {\n    handleClickOutside: () => DropdownSteps.handleClickOutside,\n};\n\nexport default onClickOutside(DropdownSteps,clickOutsideConfig);\n","import React, {useRef, useState} from 'react';\nimport DropdownSteps from './DropdownSteps'\n\nexport default function Directions({mapRef, markers, polylines, clearDirections, btn, setBtn, routeBox, setRouteBox, stIdx, travMode, showTravMode, setShowTravMode, stshowIdx, setStshowIdx}){\n\n    var latlngbounds = useRef();\n\n    var path = useRef([]);\n    var minTime = useRef(Number.MAX_VALUE);\n\n\n    var [travDistAndTime, setTravDistAndTime] = useState({dist : \"\", time : \"\"});\n\n    var dp = useRef();\n    \n    var coords = useRef([]);\n\n    var [routeBuildResponse, setRouteBuildResponse] = useState([]);\n\n    var directionsService = new window.google.maps.DirectionsService();\n\n    function recenterMap(){\n\n        latlngbounds.current = new window.google.maps.LatLngBounds();\n        markers.forEach((marker) => {\n            latlngbounds.current.extend({lat : marker.lat, lng : marker.lng});\n        })\n        mapRef.current.setCenter(latlngbounds.current.getCenter());\n        mapRef.current.fitBounds(latlngbounds.current);\n    }\n\n    function mode(){\n\n        if(travMode.current === 'DRIVING') return window.google.maps.TravelMode.DRIVING\n        else if(travMode.current === 'WALKING') return window.google.maps.TravelMode.WALKING\n        else if(travMode.current === 'TRANSIT') return window.google.maps.TravelMode.TRANSIT\n        else if(travMode.current === 'BICYCLING') return window.google.maps.TravelMode.BICYCLING  \n    }\n\n    let TSP = function(timeMatrix, maskVal, currPos, checkMask){\n        if(maskVal === checkMask){\n            return {\n                currTime : timeMatrix[currPos].elements[0].duration.value,\n                currPath : [0]\n            };\n        }\n        if(dp[currPos][maskVal] !== -1){\n            return dp[currPos][maskVal];\n        }\n\n        let ansTime = Number.MAX_VALUE;\n        let ansPath = [currPos];\n\n        for(let i=0;i<timeMatrix.length;i++){\n            if((maskVal&(1<<i)) === 0){\n                let {currTime, currPath} = TSP(timeMatrix,maskVal|(1<<i),i,checkMask);\n                currTime += timeMatrix[currPos].elements[i].duration.value;\n                if(currTime < ansTime){\n                    ansTime = currTime;\n                    ansPath = [i, ...currPath];\n                }\n            }\n        }\n        return dp[currPos][maskVal] = {currTime : ansTime, currPath : ansPath}\n    }\n\n    \n    function calMatrix(markerPoints, callback){\n\n        const distanceMatrixService = new window.google.maps.DistanceMatrixService();\n\n        distanceMatrixService.getDistanceMatrix({\n            origins: markerPoints,\n            destinations: markerPoints,\n            travelMode: mode(),\n        }, (res, status) => {\n            if (status === \"OK\") {\n                for(let i=0;i<res.rows.length;i++){\n                    for(let j=0;j<res.rows[i].elements.length;j++){\n                        if(res.rows[i].elements[j].status !== \"OK\"){\n                            alert(\"No route available for the selected Mode at this moment.\")       \n                            setBtn(false);\n                            setRouteBox(false);\n                            return;\n                        }\n                    }\n                }\n                setBtn(true);\n                setRouteBox(true);\n\n                dp = new Array(markers.length);\n                for(let i=0;i<dp.length;i++){\n                    dp[i] = new Array(Math.pow(2, markers.length))\n                    for(let j=0;j<dp[i].length;j++){\n                        dp[i][j] = -1;\n                    }\n                }\n                let {currTime, currPath} = TSP(res.rows, 1, 0, Math.pow(2, markers.length) - 1);\n                path.current = [0,...currPath]\n                minTime.current = currTime;\n                callback();\n            } else {\n                alert(status);\n            }\n        })\n    }\n    \n    function chooseMode(modeClicked){\n\n        if(markers.length < 2){\n            alert(\"Please Mark atleast two locations.\")\n            return;\n        }\n\n        clearDirections()\n        travMode.current = modeClicked;\n        setShowTravMode(travMode.current)\n        recenterMap();\n        showRoute();\n    }\n\n    function animatePath(map, pathCoords,idx) {\n\n        let speed = 5000;\n        \n        polylines[idx] = new window.google.maps.Polyline({\n            path: [],\n            geodesic: true,\n            strokeColor: '#FF0000',\n            strokeOpacity: 1.0,\n            strokeWeight: 3,\n            editable: false,\n            map: map\n        });\n    \n        let chunk = Math.ceil(pathCoords.length / speed);\n        let totalChunks = Math.ceil(pathCoords.length / chunk);\n        let i = 1;\n    \n        function step() {\n    \n            polylines[idx].setPath(pathCoords.slice(0, i * chunk));\n            i++;\n            if (i <= totalChunks){\n                window.requestAnimationFrame(step);\n            }\n        }\n        window.requestAnimationFrame(step);\n    }\n\n\n    function showRoute(){\n\n        let markerPoints = [];\n\n        markers.map(marker => (\n            markerPoints.push({\n                lat : marker.lat,\n                lng : marker.lng\n            })\n        ))\n            \n        function plot(){\n\n            let requests = [];\n            for(let i=0;i<path.current.length-1;i++){\n                requests.push({\n                    origin : markerPoints[path.current[i]],\n                    destination : markerPoints[path.current[i+1]],\n                    travelMode : mode(),\n                })\n            }\n\n            function buildRoute(requests) {\n\n                return Promise.all(requests.map((request) => {\n                    return new Promise(function(resolve) {\n                        directionsService.route(request, function(result, status) {\n                            if (status === \"OK\") {\n                                return resolve(result.routes[0].legs[0]);\n                            }\n                        });\n                    });    \n                }));\n            }\n\n            buildRoute(requests).then((results) => {\n\n                setRouteBuildResponse(results);\n\n                var dist = 0;\n                var time = 0;\n                results.forEach(result => {\n                    dist += result.distance.value\n                    time += result.duration.value\n                })\n\n                dist = (dist/1000).toFixed(2);\n                time = (time/60).toFixed(0);\n                setTravDistAndTime({dist : dist + \" Km\", time : time + \" mins\"});\n\n                coords.current = results.map((result) => {\n                    return result.steps.flatMap(step => step.path);\n                });\n\n                let allCoords = results.flatMap((result) => {\n                    return result.steps.flatMap(step => step.path);\n                });\n            \n                stIdx.current = 0;\n                setStshowIdx(stIdx.current);\n                animatePath(mapRef.current, allCoords, 0);\n            });\n        }\n        calMatrix(markerPoints, plot)\n    }\n    \n    const nextClick = () => {\n        recenterMap();\n        if(stIdx.current < coords.current.length){\n            animatePath(mapRef.current, coords.current[stIdx.current], stIdx.current)\n        }\n        stIdx.current = stIdx.current + 1;\n        setStshowIdx(stIdx.current);\n        if(stIdx.current === coords.current.length + 1){\n            setBtn(true);\n        }\n    }\n\n    const stepRoute = () => {\n        clearDirections();\n        setRouteBox(true);\n        setBtn(false);\n        setShowTravMode(travMode.current)\n        nextClick();\n    }\n\n    return (\n        <div>\n            <div className = \"directions-choose-box\">\n                <p>Choose Mode of Traveling</p>\n                <div className = \"wrapper\">\n                    <button className = \"travBtn\" onClick = {() => chooseMode('DRIVING')}>Driving</button>\n                    <button className = \"travBtn\" onClick = {() => chooseMode('WALKING')}>Walking</button>\n                    <button className = \"travBtn\" onClick = {() => chooseMode('BICYCLING')}>Bicycling</button>\n                    <button className = \"travBtn\" onClick = {() => chooseMode('TRANSIT')}>Transit</button>    \n                </div>\n                <p className = \"directions-para\">Mode : {showTravMode}</p>\n                <button className = \"travBtn remove-direction\" onClick = {() => clearDirections()}>Remove Directions</button>\n            </div>\n\n            {routeBox && <div>\n                {btn && <div className = \"route-box\">\n                    <p>Directions</p>\n                    <div className = \"scroll-list\">\n                        {routeBuildResponse.map((route, index) => {\n                            if(index === 0){\n                                return <div key = {index}>\n                                    <div className = \"route-points\">\n                                        <div className = \"route-list-div2\">Start : </div>\n                                        <div className = \"route-list-div\">{route.start_address}</div>\n                                    </div>\n                                    <div className = \"route-points\">\n                                        <div className = \"route-list-div2\">{index+1}</div>\n                                        <div className = \"route-list-div\">{route.end_address}</div> \n                                    </div>\n                                </div>\n                            }\n                            if(index === routeBuildResponse.length - 1){\n                                return (\n                                    <div key = {index} className = \"route-points\">\n                                        <div className = \"route-list-div2\">End : </div>\n                                        <div className = \"route-list-div\">{route.end_address}</div>\n                                    </div>\n                                )\n                            }\n                            return (\n                                <div key = {index} className = \"route-points\">\n                                    <div className = \"route-list-div2\">{index+1}</div>\n                                    <div className = \"route-list-div\">{route.end_address}</div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div className = \"distTime\">\n                        <span>Total Distance : {travDistAndTime.dist} </span>\n                        <span>Time : {travDistAndTime.time}</span>                        \n                    </div>\n                    <button onClick = {() => stepRoute()}>Show By Step Directions</button>   \n                </div>}\n\n                {!btn && <div className = \"stepDirectionsBox\">\n                    <p>Start Point : </p>\n                    <div className = \"startEnd\">{routeBuildResponse[stshowIdx-1].start_address}</div>\n                    <p>End Point : </p>\n                    <div className = \"startEnd\">{routeBuildResponse[stshowIdx-1].end_address}</div>\n                    <DropdownSteps\n                        title = \"Steps\"\n                        steps = {routeBuildResponse[stshowIdx-1].steps}\n                    />\n                    <div className = \"nxtDirec\">\n                        <button onClick = {() => nextClick()}>Next Direction</button>\n                    </div>\n                </div>}\n            </div>}\n        </div>\n    )\n}","import React, {useState, useCallback, useRef} from 'react';\nimport {GoogleMap, useLoadScript, Marker, InfoWindow} from '@react-google-maps/api';\nimport {geocodeByAddress,getLatLng} from 'react-places-autocomplete'\nimport {RemoveScrollBar} from 'react-remove-scroll-bar';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { IconButton } from '@material-ui/core';\n\nimport mapStyles from './styles/mapStyles';\nimport AddressBox from './components/AddressBox';\nimport InputBox from './components/InputBox';\nimport Compass from './components/Compass';\nimport Directions from './components/Directions';\n\nrequire('dotenv').config();\n\nconst mapContainerStyle = {\n    width : '100vw',\n    height : '100vh'\n}\n\nconst center = {\n    lat : 28.7041,\n    lng : 77.1025\n}\n\nconst options = {\n    styles : mapStyles,\n    mapTypeControl : true,\n}\n\nexport default function App() {\n\n    const [libraries] = useState([\"places\"])\n\n    const {isLoaded, loadError} = useLoadScript({\n        googleMapsApiKey : process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n        libraries,\n    })\n\n    const [markers, setMarkers] = useState([]);\n    const [selected, setSelected] = useState(null);\n\n    const [address, setAddress] = useState(\"\");\n\n    const [btn, setBtn] = useState(true);\n    const [routeBox, setRouteBox] = useState(false);\n\n    var stIdx = useRef(0)\n    var polylines = useRef([]);\n\n    var travMode = useRef(null);\n    const [showTravMode, setShowTravMode] = useState(null);\n\n    const [stshowIdx, setStshowIdx] = useState(0);\n\n    const mapRef = useRef();\n\n    const onMapLoad = useCallback((map) => {\n        mapRef.current = map;\n    },[]);\n\n    const clearDirections = () => {        \n        setBtn(true);\n        setRouteBox(false);\n        setShowTravMode(null);\n        stIdx.current = 0;\n        setStshowIdx(stIdx.current);\n        if(polylines.current.length !== 0){\n            for(let i=0;i<polylines.current.length;i++){\n                polylines.current[i].setMap(null)\n            }\n        }\n    }\n\n    const onMapClick = (event) => {\n        const geocoder = new window.google.maps.Geocoder();\n        const latLng = {\n            lat : event.latLng.lat(),\n            lng : event.latLng.lng(),\n        }\n        geocoder.geocode({location : latLng}, (results, status) => {\n            if(status === \"OK\"){\n                var address = \"\" + results[0].formatted_address;\n                setMarkers(current => [...current, {\n                    address : address,\n                    lat : event.latLng.lat(),\n                    lng : event.latLng.lng()\n                }]);\n            }else{\n                window.alert(\"Geocoder failed due to: \" + status);\n                setMarkers(current => [...current, {\n                    address : \"\",\n                    lat : event.latLng.lat(),\n                    lng : event.latLng.lng()\n                }]);\n            }\n        })\n        clearDirections()\n    }\n\n    const handleSelect = async value => {\n        const results = await geocodeByAddress(value);\n        const latlng = await getLatLng(results[0]);\n        setAddress(value)\n        mapRef.current.panTo({lat : latlng.lat, lng : latlng.lng})\n        mapRef.current.setZoom(14)\n    }\n\n    function deletePoint(idx){\n        clearDirections()\n\n        setMarkers(current => {\n            return current.filter((marker,index) => {\n                return index !== idx;\n            });\n        });\n    }\n\n    const markerDrag = (e,idx) => {\n        console.log(e,idx);\n        setSelected(null);\n        const geocoder = new window.google.maps.Geocoder();\n        const latLng = {\n            lat : e.latLng.lat(),\n            lng : e.latLng.lng()\n        }\n        geocoder.geocode({location : latLng}, (results, status) => {\n            if(status === \"OK\"){\n                var address = \"\" + results[0].formatted_address;\n                setMarkers(current => current.map((marker, index) => {\n                    return index !== idx ? marker : {\n                        address : address,\n                        lat : e.latLng.lat(),\n                        lng : e.latLng.lng()\n                    }\n                }))\n            }else{\n                window.alert(\"Geocoder failed due to: \" + status);\n                setMarkers(current => current.map((marker, index) => {\n                    return index === idx ? marker : {\n                        address : \"\",\n                        lat : e.latLng.lat(),\n                        lng : e.latLng.lng()\n                    }\n                }))\n            }\n        })\n        clearDirections()\n    }\n\n    if(loadError) return (\n        <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            height: '100vh',\n            fontFamily: 'Inter, sans-serif',\n            fontSize: '18px',\n            color: '#374151'\n        }}>\n            Error Loading Maps! Please check your network connection.\n        </div>\n    );\n    if(!isLoaded) return (\n        <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            height: '100vh',\n            fontFamily: 'Inter, sans-serif',\n            fontSize: '18px',\n            color: '#374151'\n        }}>\n            Loading Maps...\n        </div>\n    );\n\n\n  return (\n    <div>\n        <RemoveScrollBar/>\n\n        <InputBox address = {address} setAddress = {setAddress} handleSelect = {handleSelect}/>\n        \n        <Compass mapRef = {mapRef} />\n\n        <GoogleMap \n            className = \"map\"\n            mapContainerStyle={mapContainerStyle} \n            zoom = {8} \n            center = {center}\n            options = {options}\n            onClick = {onMapClick}\n            onLoad = {onMapLoad}\n        >\n            {markers.map((marker, index) => (\n                <Marker \n                    key = {index} \n                    position = {{lat : marker.lat, lng : marker.lng }}\n                    icon = {{\n                        url : './images/marker4.svg',\n                        scaledSize : new window.google.maps.Size(30,30),\n                        origin : new window.google.maps.Point(0,0),\n                        anchor : new window.google.maps.Point(15,35),\n                    }}\n                    animation = {window.google.maps.Animation.DROP}\n                    onClick = {() => {\n                        setSelected({...marker, index});\n                    }}\n                    draggable = {true}\n                    onDragEnd = {(e) => markerDrag(e,index)}\n                />  \n            ))}\n\n            {selected && (<InfoWindow\n                position = {{lat : selected.lat, lng : selected.lng}}\n                // anchor = {new window.google.maps.Point(0,0)}\n                options = {{pixelOffset : new window.google.maps.Size(0,-30)}}\n                onCloseClick = {() => {\n                    setSelected(null);                    \n                }}\n            >\n                <div className = \"infowindow-content\">\n                    <p>{selected.address}</p>\n                    <IconButton  aria-label=\"delete\" onClick = {() => {\n                        deletePoint(selected.index)\n                        setSelected(null);\n                    }}>\n                        <DeleteIcon />\n                    </IconButton>\n                </div>\n            </InfoWindow>)}\n\n            {markers.length && <div className = \"addressContainer\">\n                {markers.map((marker, index) => (\n                    <AddressBox key = {index} marker = {marker} onDelete = {deletePoint} id = {index} setSelected = {setSelected}/>\n                ))}\n            </div>}\n\n            <Directions\n                mapRef = {mapRef}\n                markers = {markers}\n                clearDirections = {clearDirections}\n                polylines = {polylines.current}\n                btn = {btn}\n                setBtn = {setBtn}\n                routeBox = {routeBox}\n                setRouteBox = {setRouteBox}\n                stIdx = {stIdx}\n                travMode = {travMode}\n                showTravMode = {showTravMode}\n                setShowTravMode = {setShowTravMode}\n                setStshowIdx = {setStshowIdx}\n                stshowIdx = {stshowIdx}\n            />\n        </GoogleMap>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}